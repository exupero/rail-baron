;; Analyzed by ClojureScript 0.0-3195
{:use-macros {match cljs.core.match, go cljs.core.async.macros}, :excludes #{}, :name baron.core, :imports nil, :requires {vdom.elm vdom.elm, xhr goog.net.XhrIo, goog.net.XhrIo goog.net.XhrIo, cljs.core.match cljs.core.match, async cljs.core.async, cljs.core.async cljs.core.async, cljs.reader cljs.reader, reader cljs.reader}, :uses {close! cljs.core.async, chan cljs.core.async, foldp vdom.elm, render! vdom.elm, put! cljs.core.async}, :defs {connection {:protocol-inline nil, :meta {:arglists (quote ([a b])), :end-column 17, :end-line 39, :column 7, :line 39, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/connection, :variadic false, :file "src/baron/core.cljs", :end-column 17, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, step {:protocol-inline nil, :meta {:arglists (quote ([model action])), :end-column 11, :end-line 126, :column 7, :line 126, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/step, :variadic false, :file "src/baron/core.cljs", :end-column 11, :method-params ([model action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model action])), :test true}, fetch {:protocol-inline nil, :meta {:arglists (quote ([parser path])), :end-column 12, :end-line 14, :column 7, :line 14, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/fetch, :variadic false, :file "src/baron/core.cljs", :end-column 12, :method-params ([parser path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parser path])), :test true}, projection {:meta {:end-column 16, :end-line 25, :column 6, :line 25, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 25, :column 1, :end-line 25, :end-column 16, :test true, :name baron.core/projection}, height {:meta {:end-column 12, :end-line 12, :column 6, :line 12, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 12, :column 1, :end-line 12, :end-column 12, :test true, :name baron.core/height}, ui-text {:protocol-inline nil, :meta {:arglists (quote ([{[a b] :selected, :keys [cities payoffs]} actions])), :end-column 14, :end-line 87, :column 7, :line 87, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui-text, :variadic false, :file "src/baron/core.cljs", :end-column 14, :method-params ([p__11069 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{[a b] :selected, :keys [cities payoffs]} actions])), :test true}, path {:meta {:end-column 10, :end-line 33, :column 6, :line 33, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 33, :column 1, :end-line 33, :end-column 10, :test true, :name baron.core/path}, ui-connection {:protocol-inline nil, :meta {:arglists (quote ([{:keys [cities selected]} actions])), :end-column 20, :end-line 69, :column 7, :line 69, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui-connection, :variadic false, :file "src/baron/core.cljs", :end-column 20, :method-params ([p__11036 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cities selected]} actions])), :test true}, lon-lat {:meta {:end-column 13, :end-line 35, :column 6, :line 35, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 35, :column 1, :end-line 35, :end-column 13, :test true, :name baron.core/lon-lat}, flip {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 11, :end-line 124, :column 7, :line 124, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/flip, :variadic false, :file "src/baron/core.cljs", :end-column 11, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, ui-cities {:protocol-inline nil, :meta {:arglists (quote ([{:keys [cities]} actions])), :end-column 16, :end-line 58, :column 7, :line 58, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui-cities, :variadic false, :file "src/baron/core.cljs", :end-column 16, :method-params ([p__11000 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cities]} actions])), :test true}, ui-country {:protocol-inline nil, :meta {:arglists (quote ([model actions])), :end-column 17, :end-line 48, :column 7, :line 48, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui-country, :variadic false, :file "src/baron/core.cljs", :end-column 17, :method-params ([model actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([model actions])), :test true}, width {:meta {:end-column 11, :end-line 11, :column 6, :line 11, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :test true, :name baron.core/width}, ui-selected-cities {:protocol-inline nil, :meta {:arglists (quote ([{:keys [cities selected]} actions])), :end-column 25, :end-line 75, :column 7, :line 75, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui-selected-cities, :variadic false, :file "src/baron/core.cljs", :end-column 25, :method-params ([p__11041 actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cities selected]} actions])), :test true}, format-money {:meta {:end-column 18, :end-line 37, :column 6, :line 37, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :file "src/baron/core.cljs", :line 37, :column 1, :end-line 37, :end-column 18, :test true, :name baron.core/format-money}, ui {:protocol-inline nil, :meta {:arglists (quote ([actions])), :end-column 9, :end-line 106, :column 7, :line 106, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/ui, :variadic false, :file "src/baron/core.cljs", :end-column 9, :method-params ([actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([actions])), :test true}, half {:protocol-inline nil, :meta {:arglists (quote ([[cx cy] [x y]])), :end-column 11, :end-line 43, :column 7, :line 43, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/half, :variadic false, :file "src/baron/core.cljs", :end-column 11, :method-params ([p__10994 p__10995]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[cx cy] [x y]])), :test true}, roll {:protocol-inline nil, :meta {:arglists (quote ([n])), :end-column 11, :end-line 120, :column 7, :line 120, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/roll, :variadic false, :file "src/baron/core.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, land-border {:protocol-inline nil, :meta {:arglists (quote ([shape])), :end-column 18, :end-line 22, :column 7, :line 22, :file "/Users/exupero/code/rail-baron/src/baron/core.cljs"}, :name baron.core/land-border, :variadic false, :file "src/baron/core.cljs", :end-column 18, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :test true}}, :require-macros {cljs.core.match cljs.core.match, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:order [:lon :lat :type :coordinates :use :xlink:href :image :clip-path :width :height :clipPath :id :cities :name :g :class :transform :onclick :ontouchstart :select :circle :r :selected :path :d :deselect :payoffs :text :dy :usa :main :svg :defs :else :no-op :recur], :seen #{:usa :path :deselect :r :coordinates :transform :selected :else :cities :use :name :payoffs :circle :width :onclick :dy :clipPath :recur :type :ontouchstart :no-op :clip-path :g :id :class :lon :defs :xlink:href :svg :lat :image :d :main :height :select :text}}, :doc nil}