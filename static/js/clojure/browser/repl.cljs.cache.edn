;; Analyzed by ClojureScript 0.0-3195
{:use-macros nil, :excludes #{}, :name clojure.browser.repl, :imports nil, :requires {cljs.repl cljs.repl, event clojure.browser.event, clojure.browser.event clojure.browser.event, net clojure.browser.net, clojure.browser.net clojure.browser.net, gbrowser goog.labs.userAgent.browser, goog.labs.userAgent.browser goog.labs.userAgent.browser, goog.dom goog.dom, gdom goog.dom}, :uses nil, :defs {send-result {:protocol-inline nil, :meta {:arglists (quote ([connection url data])), :end-column 18, :end-line 60, :column 7, :line 60, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/send-result, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 18, :method-params ([connection url data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([connection url data])), :test true}, xpc-connection {:meta {:end-column 20, :end-line 28, :column 6, :line 28, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :file "static/js/clojure/browser/repl.cljs", :line 28, :column 1, :end-line 28, :end-column 20, :test true, :name clojure.browser.repl/xpc-connection}, get-ua-product {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 21, :end-line 36, :column 7, :line 36, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/get-ua-product, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, bootstrap {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load.", :end-column 16, :end-line 114, :column 7, :line 114, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/bootstrap, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load.", :test true}, connect {:protocol-inline nil, :meta {:arglists (quote ([repl-server-url])), :doc "Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function.", :end-column 14, :end-line 170, :column 7, :line 170, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/connect, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 14, :method-params ([repl-server-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([repl-server-url])), :doc "Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function.", :test true}, repl-print {:protocol-inline nil, :meta {:arglists (quote ([data])), :end-column 17, :end-line 30, :column 7, :line 30, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/repl-print, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, evaluate-javascript {:protocol-inline nil, :meta {:arglists (quote ([conn block])), :doc "Process a single block of JavaScript received from the server", :end-column 26, :end-line 43, :column 7, :line 43, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/evaluate-javascript, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 26, :method-params ([conn block]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn block])), :doc "Process a single block of JavaScript received from the server", :test true}, wrap-message {:protocol-inline nil, :meta {:arglists (quote ([t data])), :end-column 19, :end-line 79, :column 7, :line 79, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/wrap-message, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 19, :method-params ([t data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t data])), :test true}, start-evaluator {:protocol-inline nil, :meta {:arglists (quote ([url])), :doc "Start the REPL server connection.", :end-column 22, :end-line 82, :column 7, :line 82, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/start-evaluator, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 22, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Start the REPL server connection.", :test true}, load-queue {:meta {:end-column 16, :end-line 112, :column 6, :line 112, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :file "static/js/clojure/browser/repl.cljs", :line 112, :column 1, :end-line 112, :end-column 16, :test true, :name clojure.browser.repl/load-queue}, send-print {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([url data] [url data n]), :arglists ([url data] [url data n]), :arglists-meta (nil nil)}, :arglists (quote ([url data] [url data n])), :doc "Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.", :end-column 17, :end-line 63, :column 7, :line 63, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :name clojure.browser.repl/send-print, :variadic false, :file "static/js/clojure/browser/repl.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([url data] [url data n]), :arglists ([url data] [url data n]), :arglists-meta (nil nil)}, :method-params ([url data] [url data n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists ([url data] [url data n]), :doc "Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.", :test true}, order {:meta {:end-column 11, :end-line 77, :column 6, :line 77, :file "/Users/exupero/code/rail-baron/static/js/clojure/browser/repl.cljs"}, :file "static/js/clojure/browser/repl.cljs", :line 77, :column 1, :end-line 77, :end-column 11, :test true, :name clojure.browser.repl/order}}, :require-macros {cljs.repl cljs.repl}, :cljs.analyzer/constants {:order [:print :safari :chrome :firefox :ie :status :ua-product :value :stacktrace :exception :success :error :type :content :order :evaluate-javascript :send-result :result :ready :peer_uri], :seen #{:ready :ua-product :safari :content :value :type :evaluate-javascript :peer_uri :print :firefox :success :chrome :status :result :ie :stacktrace :order :error :exception :send-result}}, :doc "Receive - Eval - Print - Loop\n\n  Receive a block of JS (presumably generated by a ClojureScript compiler)\n  Evaluate it naively\n  Print the result of evaluation to a string\n  Send the resulting string back to the server Loop!"}